{"version":3,"sources":["tek.progress-bar.js"],"names":["angular","module","run","$templateCache","put","directive","scope","manager","containerClass","barClass","ngModel","mode","value","restrict","transclude","controllerAs","templateUrl","bindToController","controller","$scope","$element","ProgressObj","element","divElements","find","this","containerElement","addClass","settings","barContainer","bar","fullClass","emptyClass","verticalClass","horizontalClass","prototype","get","set","val","css","updateClasses","removeClass","setAnimation","init","progressObj","facade","newVal","undefined","$evalAsync","_getDefer","resolve","$on","_updateDefer","$watch","_updateValue","requestAnimationFrame","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","factory","$q","params","deferred","defer","instance","lastVal","animation","requiredClear","incrementSpeed","incrementStrategy","stat","rnd","Math","random","round","extend","intervalCont","interval","increment","progressBarManager","setInterval","self","clear","clearInterval","isInProgress","promise","then","data","getPromise","Error","increase","start","stop","done","reset","animationVal","isAnimated"],"mappings":"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","file":"tek.progress-bar.min.js","sourcesContent":["/**\n * angular-tek-progress-bar - angular-tek-progress-bar is an AngularJS module to create and controls progress bar.\n * @version v0.2.0\n * @link https://github.com/TekVanDo/Angular-Tek-Progress-bar\n * @license MIT\n */\n(function () {\n    \"use strict\";\n    angular.module('Tek.progressBar', []).run(['$templateCache', function ($templateCache) {\n        $templateCache.put('Tek.progressBarDirective.html', \"<div class='progress' ng-class='bar.containerClass'><div class='progress-bar' ng-class='bar.barClass' ng-transclude></div></div>\");\n    }]);\n}());\n(function () {\n    \"use strict\";\n    angular.module('Tek.progressBar').directive('tekProgressBar', function () {\n        return {\n            scope: {\n                manager: \"=\",\n                containerClass: \"@class\",\n                barClass: \"@\",\n                ngModel: \"=\",\n                mode: '@',\n                value: \"=\"\n            },\n            restrict: \"E\",\n            transclude: true,\n            controllerAs: \"bar\",\n            templateUrl: \"Tek.progressBarDirective.html\",\n            bindToController: true,\n            controller: ['$scope', '$element', function ($scope, $element) {\n                var bar = this;\n\n                var settings = {\n                    fullClass: 'full-bar',\n                    emptyClass: 'empty-bar',\n                    verticalClass: 'vertical',\n                    horizontalClass: ''\n                };\n\n                function ProgressObj(element, mode) {\n                    var divElements = element.find('div');\n                    this.mode = mode;\n                    this.containerElement = angular.element(divElements[0]);\n                    this.containerElement.addClass(settings[mode + 'Class']);\n                    this.barContainer = angular.element(divElements[1]);\n                    this.value = 0;\n                }\n\n                ProgressObj.prototype.get = function () {\n                    return this.value;\n                };\n\n                ProgressObj.prototype.set = function (val) {\n                    this.value = val;\n                    if(this.mode === 'horizontal'){\n                        this.barContainer.css('width', val + '%');\n                    }\n                    if(this.mode === 'vertical'){\n                        this.barContainer.css('height', val + '%');\n                    }\n                    this.updateClasses();\n                };\n\n                ProgressObj.prototype.updateClasses = function () {\n                    if (this.value <= 0) {\n                        this.containerElement.removeClass(settings.fullClass);\n                        return this.containerElement.addClass(settings.emptyClass);\n                    }\n\n                    if (this.value >= 100) {\n                        this.containerElement.removeClass(settings.emptyClass);\n                        return this.containerElement.addClass(settings.fullClass);\n                    }\n\n                    this.containerElement.removeClass(settings.fullClass);\n                    this.containerElement.removeClass(settings.emptyClass);\n                };\n\n                ProgressObj.prototype.setAnimation = function (val) {\n                    if(val === true){\n                        this.barContainer.css('transition', '');\n                    }else{\n                        this.barContainer.css('transition', 'none');\n                    }\n                };\n\n                bar.init = function () {\n                    bar.mode = (bar.mode === 'vertical') ? bar.mode : 'horizontal';\n                    bar.progressObj = new ProgressObj($element, bar.mode);\n                    var facade = {\n                        get: function () {\n                            return bar.progressObj.get();\n                        },\n                        set: function (newVal) {\n                            if (bar.ngModel !== undefined) { // todo setInterval problem\n                                $scope.$evalAsync(function () {\n                                    bar.ngModel = newVal;\n                                });\n                            } else {\n                                bar.progressObj.set(newVal);\n                            }\n                        },\n                        setAnimation: function (val) {\n                            bar.progressObj.setAnimation(val);\n                        }\n                    };\n\n                    if (bar.manager) {\n                        bar.manager._getDefer().resolve(facade);\n                        $scope.$on('$destroy', function () {\n                            bar.manager._updateDefer();\n                        });\n                    }\n\n                    if (bar.ngModel !== undefined) {\n                        $scope.$watch('bar.ngModel', function (newVal) {\n                            if(typeof newVal !== 'number' || newVal < 0 || newVal !== newVal){\n                                newVal = 0;\n                            }\n\n                            if(newVal > 100){\n                                newVal = 100;\n                            }\n\n                            if (bar.manager) {\n                                bar.manager._updateValue(newVal);\n                            }\n                            bar.progressObj.set(newVal);\n                        });\n                    }\n                    $scope.$watch('bar.value', function (newVal) {\n                        if(typeof newVal !== 'number' || newVal < 0 || newVal !== newVal){\n                            newVal = 0;\n                        }\n\n                        if(newVal > 100){\n                            newVal = 100;\n                        }\n\n                        if (bar.manager) {\n                            bar.manager._updateValue(newVal);\n                        }\n                        bar.progressObj.set(newVal);\n                    });\n                };\n                bar.init();\n            }]\n        }\n    });\n}());\n\n(function () {\n    \"use strict\";\n    var requestAnimationFrame = (function () {\n        return window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                window.setTimeout(callback, 1000 / 60);\n            };\n    })();\n\n    angular.module('Tek.progressBar').factory('progressBarManager', ['$q', function ($q) {\n        return function (params) {\n            var deferred = $q.defer();\n            var instance = null;\n            var lastVal = 0;\n            var animation = true;\n            var requiredClear = false;\n\n            var settings = {\n                incrementSpeed: 300,\n                incrementStrategy: function (stat) {\n                    var rnd = 0;\n                    if (stat >= 0 && stat < 25) {\n                        rnd = (Math.random() * (5 - 3 + 1) + 3);\n                    } else if (stat >= 25 && stat < 65) {\n                        rnd = (Math.random() * 3);\n                    } else if (stat >= 65 && stat < 90) {\n                        rnd = (Math.random() * 2);\n                    } else if (stat >= 90 && stat < 99) {\n                        rnd = 0.5;\n                    }\n                    return Math.round((stat + rnd) * 100) / 100;\n                }\n            };\n\n            if(params) {\n                angular.extend(settings, params);\n            }\n\n            var intervalCont = (function () {\n                var interval = null;\n                return {\n                    increment: function () {\n                        progressBarManager.set(settings.incrementStrategy(lastVal));\n                    },\n                    setInterval: function () {\n                        var self = this;\n                        if (requiredClear) {\n                            requiredClear = false;\n                            progressBarManager.clear();\n                        }\n\n                        if (!interval) {\n                            interval = setInterval(function () {\n                                self.increment();\n                            }, settings.incrementSpeed);\n                        }\n                    },\n                    clearInterval: function () {\n                        clearInterval(interval);\n                        interval = null;\n                    },\n                    isInProgress: function () {\n                        return !!interval;\n                    }\n                };\n            }());\n\n            var progressBarManager = {\n                _getDefer: function () {\n                    return deferred;\n                },\n                _updateDefer: function () {\n                    deferred = $q.defer();\n                    instance = null;\n                    deferred.promise.then(function (data) {\n                        instance = data;\n                        instance.set(lastVal);\n                        instance.setAnimation(animation);\n                    });\n                },\n                _updateValue: function (val) {\n                    lastVal = val;\n                },\n                getPromise: function () {\n                    return deferred.promise;\n                },\n                set: function (val) {\n                    //Checking value is number and not NaN\n                    if (typeof val !== 'number' || val !== val) {\n                        throw new Error(\"Wrong value\");\n                    }\n                    if (val < 0) {\n                        val = 0;\n                    }\n                    if (val > 100) {\n                        val = 100;\n                    }\n                    lastVal = val;\n\n                    //huck if need to clear before new set\n                    if (requiredClear) {\n                        requiredClear = false;\n                        this.clear(val);\n                        return this;\n                    } else {\n                        if (instance) {\n                            instance.set(lastVal);\n                        }\n                    }\n                    return this;\n                },\n                get: function () {\n                    return lastVal;\n                },\n                isInProgress: function () {\n                    return intervalCont.isInProgress();\n                },\n                increase: function (value) {\n                    if(typeof value === 'number' && value === value){\n                        this.set(lastVal + value);\n                    }else{\n                        intervalCont.increment();\n                    }\n                    return this;\n                },\n                start: function () {\n                    intervalCont.setInterval();\n                    return this;\n                },\n                stop: function () {\n                    intervalCont.clearInterval();\n                    return this;\n                },\n                done: function () {\n                    this.stop();\n                    this.set(100);\n                    requiredClear = true;\n                    return this;\n                },\n                reset: function () {\n                    this.stop();\n                    this.set(0);\n                    return this;\n                },\n                clear: function (val) {\n                    var animationVal = this.isAnimated();\n                    var self = this;\n                    this.stop();\n                    this.setAnimation(false);\n                    this.reset();\n\n                    var deferred = $q.defer();\n                    requestAnimationFrame(function () {\n                        self.setAnimation(animationVal);\n                        deferred.resolve();\n                    });\n\n                    deferred.promise.then(function () {\n                        if(val !== undefined) {\n                            self.set(val);\n                        }\n                    });\n\n                    return this;\n                },\n                setAnimation: function (val) {\n                    animation = !!val;\n                    deferred.promise.then(function (data) {\n                        data.setAnimation(animation);\n                    });\n                    return this;\n                },\n                isAnimated: function () {\n                    return animation;\n                }\n            };\n\n            progressBarManager._updateDefer(0);\n\n            return progressBarManager;\n        }\n    }]);\n}());"]}